name: Build

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]
  workflow_call: # Allow this workflow to be called by other workflows

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Go Environment
      uses: ./.github/actions/setup-go-env
    
    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...
      env:
        SKIP_INTEGRATION_TESTS: "true"
    
    - name: Generate coverage report
      run: go tool cover -html=coverage.out -o coverage.html
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          coverage.out
          coverage.html
    
    - name: Check test coverage
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
        echo "Total coverage: ${COVERAGE}%"
        if (( $(echo "$COVERAGE < 40" | bc -l) )); then
          echo "Coverage is below 40%"
          exit 1
        fi

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Go Environment
      uses: ./.github/actions/setup-go-env
    
    - name: Run go fmt
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted properly:"
          gofmt -s -l .
          exit 1
        fi
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Debug golangci-lint config
      run: |
        echo "Checking golangci-lint config file:"
        cat .golangci.yml
        echo "Running golangci-lint version check:"
        golangci-lint version || echo "golangci-lint not found in PATH"
    
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v7
      with:
        version: v2.5.0
        args: --timeout=5m --max-issues-per-linter=5 --max-same-issues=3 --verbose

  container-tests:
    uses: ./.github/workflows/container-tests.yml

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Go Environment
      uses: ./.github/actions/setup-go-env
    
    - name: Build application
      run: |
        VERSION="dev-$(git rev-parse --short HEAD)"
        COMMIT="$(git rev-parse HEAD)"
        DATE="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
        go build -v \
          -ldflags="-X main.version=${VERSION} -X main.commit=${COMMIT} -X main.date=${DATE}" \
          -o darrot ./cmd/darrot
    
    - name: Test binary
      run: ./darrot --help || true