name: Release

on:
  workflow_run:
    workflows: ["Build"]
    types:
      - completed
    branches: [ main ]
  workflow_dispatch: # Allow manual trigger

permissions:
  contents: write
  pull-requests: write
  issues: write
  repository-projects: write

jobs:
  semantic-release:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}
      new_release_git_tag: ${{ steps.semantic.outputs.new_release_git_tag }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install semantic-release
      run: |
        npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github
    
    - name: Create semantic-release config
      run: |
        cat > .releaserc.json << 'EOF'
        {
          "branches": ["main"],
          "plugins": [
            "@semantic-release/commit-analyzer",
            "@semantic-release/release-notes-generator",
            "@semantic-release/changelog",
            "@semantic-release/github",
            "@semantic-release/git"
          ]
        }
        EOF
    
    - name: Run semantic-release
      id: semantic
      run: npx semantic-release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-upload:
    runs-on: ubuntu-latest
    needs: semantic-release
    if: ${{ needs.semantic-release.outputs.new_release_published == 'true' }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Go Environment
      uses: ./.github/actions/setup-go-env
    
    - name: Build Linux AMD64
      run: |
        CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build \
          -ldflags="-s -w -X main.version=${{ needs.semantic-release.outputs.new_release_version }}" \
          -o darrot-linux-amd64 ./cmd/darrot
    
    - name: Build Linux ARM64
      run: |
        sudo apt-get install -y gcc-aarch64-linux-gnu
        CGO_ENABLED=1 GOOS=linux GOARCH=arm64 CC=aarch64-linux-gnu-gcc go build \
          -ldflags="-s -w -X main.version=${{ needs.semantic-release.outputs.new_release_version }}" \
          -o darrot-linux-arm64 ./cmd/darrot
    
    - name: Create checksums
      run: |
        sha256sum darrot-linux-amd64 > checksums.txt
        sha256sum darrot-linux-arm64 >> checksums.txt
        cat checksums.txt
    
    - name: Upload Release Assets
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.semantic-release.outputs.new_release_git_tag }}
        files: |
          darrot-linux-amd64
          darrot-linux-arm64
          checksums.txt
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}