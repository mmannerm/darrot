name: Release

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.25.1'
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libopus-dev libopusfile-dev pkg-config
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...
    
    - name: Check test coverage
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
        echo "Total coverage: ${COVERAGE}%"
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "Coverage is below 80%"
          exit 1
        fi

  release:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.25.1'
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libopus-dev libopusfile-dev pkg-config
    
    - name: Generate version
      id: version
      run: |
        VERSION=$(date +%Y.%m.%d)-$(git rev-parse --short HEAD)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Generated version: $VERSION"
    
    - name: Build Linux AMD64
      run: |
        CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o darrot-linux-amd64 ./cmd/darrot
    
    - name: Build Linux ARM64
      run: |
        sudo apt-get install -y gcc-aarch64-linux-gnu
        CGO_ENABLED=1 GOOS=linux GOARCH=arm64 CC=aarch64-linux-gnu-gcc go build -ldflags="-s -w" -o darrot-linux-arm64 ./cmd/darrot
    
    - name: Create checksums
      run: |
        sha256sum darrot-linux-amd64 > checksums.txt
        sha256sum darrot-linux-arm64 >> checksums.txt
        cat checksums.txt
    
    - name: Create release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: Release v${{ steps.version.outputs.version }}
        body: |
          ## darrot Discord TTS Bot - Release v${{ steps.version.outputs.version }}
          
          ### Changes
          - Automated release from main branch
          - Built from commit: ${{ github.sha }}
          
          ### Downloads
          - `darrot-linux-amd64`: Linux x86_64 binary
          - `darrot-linux-arm64`: Linux ARM64 binary
          - `checksums.txt`: SHA256 checksums for verification
          
          ### Installation
          1. Download the appropriate binary for your system
          2. Make it executable: `chmod +x darrot-linux-*`
          3. Copy your `.env` configuration
          4. Run: `./darrot-linux-*`
          
          ### Requirements
          - Discord bot token
          - Google Cloud TTS API credentials
          - Linux system with Opus libraries
        files: |
          darrot-linux-amd64
          darrot-linux-arm64
          checksums.txt
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}